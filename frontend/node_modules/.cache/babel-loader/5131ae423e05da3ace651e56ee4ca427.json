{"remainingRequest":"/home/kien/Documents/blockchain-research/tezos-document/frontend/node_modules/babel-loader/lib/index.js!/home/kien/Documents/blockchain-research/tezos-document/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/kien/Documents/blockchain-research/tezos-document/frontend/src/requests/BlockchainRequest.js","dependencies":[{"path":"/home/kien/Documents/blockchain-research/tezos-document/frontend/src/requests/BlockchainRequest.js","mtime":1600524214197},{"path":"/home/kien/Documents/blockchain-research/tezos-document/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kien/Documents/blockchain-research/tezos-document/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/kien/Documents/blockchain-research/tezos-document/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUva2llbi9Eb2N1bWVudHMvYmxvY2tjaGFpbi1yZXNlYXJjaC90ZXpvcy1kb2N1bWVudC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUva2llbi9Eb2N1bWVudHMvYmxvY2tjaGFpbi1yZXNlYXJjaC90ZXpvcy1kb2N1bWVudC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL2tpZW4vRG9jdW1lbnRzL2Jsb2NrY2hhaW4tcmVzZWFyY2gvdGV6b3MtZG9jdW1lbnQvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvaG9tZS9raWVuL0RvY3VtZW50cy9ibG9ja2NoYWluLXJlc2VhcmNoL3Rlem9zLWRvY3VtZW50L2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL2hvbWUva2llbi9Eb2N1bWVudHMvYmxvY2tjaGFpbi1yZXNlYXJjaC90ZXpvcy1kb2N1bWVudC9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgQmFzZVJlcXVlc3QgZnJvbSAnLi9mb3VuZGF0aW9uL0Jhc2VSZXF1ZXN0JzsKCnZhciBCbG9ja2NoYWluUmVxdWVzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VSZXF1ZXN0KSB7CiAgX2luaGVyaXRzKEJsb2NrY2hhaW5SZXF1ZXN0LCBfQmFzZVJlcXVlc3QpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEJsb2NrY2hhaW5SZXF1ZXN0KTsKCiAgZnVuY3Rpb24gQmxvY2tjaGFpblJlcXVlc3QoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxvY2tjaGFpblJlcXVlc3QpOwoKICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhCbG9ja2NoYWluUmVxdWVzdCwgW3sKICAgIGtleTogImdldFVSTCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VVJMKHVybCkgewogICAgICB2YXIgYmFzZVVybCA9IHByb2Nlc3MuZW52LlZVRV9BUFBfQkxPQ0tDSEFJTl9VUkw7CiAgICAgIHJldHVybiBiYXNlVXJsLmNvbmNhdCh1cmwpOwogICAgfQogIH0sIHsKICAgIGtleTogImdlbmVyYXRlS2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2VuZXJhdGVLZXkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHVybDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmdldFVSTCgnL2FwaS9pbml0LWFjY291bnQnKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuZ2V0KHVybCkpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVLZXkoKSB7CiAgICAgICAgcmV0dXJuIF9nZW5lcmF0ZUtleS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2VuZXJhdGVLZXk7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJzaWduQ2VydGlmaWNhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zaWduQ2VydGlmaWNhdGUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHBhcmFtcykgewogICAgICAgIHZhciB1cmw7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuZ2V0VVJMKCcvYXBpL3NpZ24tZGF0YScpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHRoaXMucG9zdCh1cmwsIHBhcmFtcykpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzaWduQ2VydGlmaWNhdGUoX3gpIHsKICAgICAgICByZXR1cm4gX3NpZ25DZXJ0aWZpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2lnbkNlcnRpZmljYXRlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiYXV0aGVudGljYXRlQ2VydGlmaWNhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hdXRoZW50aWNhdGVDZXJ0aWZpY2F0ZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocGFyYW1zKSB7CiAgICAgICAgdmFyIHVybDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdXJsID0gdGhpcy5nZXRVUkwoJy9hcGkvYXV0aGVudGljYXRlLWRhdGEnKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB0aGlzLnBvc3QodXJsLCBwYXJhbXMpKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYXV0aGVudGljYXRlQ2VydGlmaWNhdGUoX3gyKSB7CiAgICAgICAgcmV0dXJuIF9hdXRoZW50aWNhdGVDZXJ0aWZpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYXV0aGVudGljYXRlQ2VydGlmaWNhdGU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJicm9hZGNhc3RDZXJ0aWZpY2F0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2Jyb2FkY2FzdENlcnRpZmljYXRlID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChwYXJhbXMpIHsKICAgICAgICB2YXIgdXJsOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmdldFVSTCgnL2FwaS9icm9hZGNhc3QtY2VydGlmaWNhdGUnKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLnBvc3QodXJsLCBwYXJhbXMpKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYnJvYWRjYXN0Q2VydGlmaWNhdGUoX3gzKSB7CiAgICAgICAgcmV0dXJuIF9icm9hZGNhc3RDZXJ0aWZpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYnJvYWRjYXN0Q2VydGlmaWNhdGU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRDb250cmFjdERldGFpbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldENvbnRyYWN0RGV0YWlsID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShwYXJhbXMpIHsKICAgICAgICB2YXIgdXJsOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmdldFVSTCgnL2FwaS9nZXQtY29udHJhY3QtZGV0YWlsJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgdGhpcy5wb3N0KHVybCwgcGFyYW1zKSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldENvbnRyYWN0RGV0YWlsKF94NCkgewogICAgICAgIHJldHVybiBfZ2V0Q29udHJhY3REZXRhaWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldENvbnRyYWN0RGV0YWlsOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gQmxvY2tjaGFpblJlcXVlc3Q7Cn0oQmFzZVJlcXVlc3QpOwoKdmFyIGluc3RhbmNlID0gbmV3IEJsb2NrY2hhaW5SZXF1ZXN0KCk7CmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlOw=="},{"version":3,"sources":["/home/kien/Documents/blockchain-research/tezos-document/frontend/src/requests/BlockchainRequest.js"],"names":["BaseRequest","BlockchainRequest","url","baseUrl","process","env","VUE_APP_BLOCKCHAIN_URL","concat","getURL","get","params","post","instance"],"mappings":";;;;;;;AAAA,OAAOA,WAAP,MAAwB,0BAAxB;;IAEMC,iB;;;;;;;;;;;;;2BACKC,G,EAAK;AACR,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA5B;AACA,aAAOH,OAAO,CAACI,MAAR,CAAeL,GAAf,CAAP;AACH;;;;;;;;;;AAESA,gBAAAA,G,GAAM,KAAKM,MAAL,CAAY,mBAAZ,C;iDACL,KAAKC,GAAL,CAASP,GAAT,C;;;;;;;;;;;;;;;;;;;uGAEWQ,M;;;;;;AACZR,gBAAAA,G,GAAM,KAAKM,MAAL,CAAY,gBAAZ,C;kDACL,KAAKG,IAAL,CAAUT,GAAV,EAAeQ,MAAf,C;;;;;;;;;;;;;;;;;;;+GAEmBA,M;;;;;;AACpBR,gBAAAA,G,GAAM,KAAKM,MAAL,CAAY,wBAAZ,C;kDACL,KAAKG,IAAL,CAAUT,GAAV,EAAeQ,MAAf,C;;;;;;;;;;;;;;;;;;;4GAGgBA,M;;;;;;AACjBR,gBAAAA,G,GAAM,KAAKM,MAAL,CAAY,4BAAZ,C;kDACL,KAAKG,IAAL,CAAUT,GAAV,EAAeQ,MAAf,C;;;;;;;;;;;;;;;;;;;yGAGaA,M;;;;;;AACdR,gBAAAA,G,GAAM,KAAKM,MAAL,CAAY,0BAAZ,C;kDACL,KAAKG,IAAL,CAAUT,GAAV,EAAeQ,MAAf,C;;;;;;;;;;;;;;;;;;;EAzBiBV,W;;AA6BhC,IAAMY,QAAQ,GAAG,IAAIX,iBAAJ,EAAjB;AACA,eAAeW,QAAf","sourcesContent":["import BaseRequest from './foundation/BaseRequest'\n\nclass BlockchainRequest extends BaseRequest {\n    getURL(url) {\n        const baseUrl = process.env.VUE_APP_BLOCKCHAIN_URL\n        return baseUrl.concat(url)\n    }\n    async generateKey() {\n        const url = this.getURL('/api/init-account')\n        return this.get(url)\n    }\n    async signCertificate(params) {\n        const url = this.getURL('/api/sign-data')\n        return this.post(url, params)\n    }\n    async authenticateCertificate(params) {\n        const url = this.getURL('/api/authenticate-data')\n        return this.post(url, params)\n    }\n    \n    async broadcastCertificate(params) {\n        const url = this.getURL('/api/broadcast-certificate')\n        return this.post(url, params)\n    }\n\n    async getContractDetail(params) {\n        const url = this.getURL('/api/get-contract-detail')\n        return this.post(url, params)\n    }\n}\n\nconst instance = new BlockchainRequest()\nexport default instance"]}]}