{"remainingRequest":"/home/kien/Documents/blockchain-research/tezos-certificate/frontend/node_modules/babel-loader/lib/index.js!/home/kien/Documents/blockchain-research/tezos-certificate/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/kien/Documents/blockchain-research/tezos-certificate/frontend/src/requests/ServerRequest.js","dependencies":[{"path":"/home/kien/Documents/blockchain-research/tezos-certificate/frontend/src/requests/ServerRequest.js","mtime":1600524214197},{"path":"/home/kien/Documents/blockchain-research/tezos-certificate/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/kien/Documents/blockchain-research/tezos-certificate/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/kien/Documents/blockchain-research/tezos-certificate/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/kien/Documents/blockchain-research/tezos-certificate/frontend/src/requests/ServerRequest.js"],"names":["BaseRequest","ServerRequest","url","baseUrl","process","env","VUE_APP_SERVER_URL","concat","params","getURL","post","get","console","log","instance"],"mappings":";;;;;;;AAAA,OAAOA,WAAP,MAAwB,0BAAxB;;IAEMC,a;;;;;;;;;;;;;2BACKC,G,EAAK;AACR,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA5B;AACA,aAAOH,OAAO,CAACI,MAAR,CAAeL,GAAf,CAAP;AACH;;;;mGACkBM,M;;;;;;AACTN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,yBAAZ,C;iDACL,KAAKC,IAAL,CAAUR,GAAV,EAAeM,MAAf,C;;;;;;;;;;;;;;;;;;;2GAEeA,M;;;;;;AAChBN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,gCAAZ,C;kDACL,KAAKC,IAAL,CAAUR,GAAV,EAAeM,MAAf,C;;;;;;;;;;;;;;;;;;;;;;;;;AAGDN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,2BAAZ,C;kDACL,KAAKE,GAAL,CAAST,GAAT,C;;;;;;;;;;;;;;;;;;;8GAGkBM,M;;;;;;AACnBN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,kCAAZ,C;kDACL,KAAKE,GAAL,CAAST,GAAT,EAAcM,MAAd,C;;;;;;;;;;;;;;;;;;;uGAEWA,M;;;;;;AACZN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,4BAAZ,C;kDACL,KAAKC,IAAL,CAAUR,GAAV,EAAeM,MAAf,C;;;;;;;;;;;;;;;;;;;iGAGKA,M;;;;;;AACNN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,sBAAZ,C;kDACL,KAAKC,IAAL,CAAUR,GAAV,EAAeM,MAAf,C;;;;;;;;;;;;;;;;;;;uGAGWA,M;;;;;;AACZN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,4BAAZ,C;kDACL,KAAKC,IAAL,CAAUR,GAAV,EAAeM,MAAf,C;;;;;;;;;;;;;;;;;;;4GAGgBA,M;;;;;;AACvBI,gBAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+DL,MAA/D;AACMN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,6BAAZ,C;kDACL,KAAKC,IAAL,CAAUR,GAAV,EAAeM,MAAf,C;;;;;;;;;;;;;;;;;;;6GAGiBA,M;;;;;;AAClBN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,4BAAZ,C;kDACL,KAAKC,IAAL,CAAUR,GAAV,EAAeM,MAAf,C;;;;;;;;;;;;;;;;;;;mHAGsBA,M;;;;;;AACvBN,gBAAAA,G,GAAM,KAAKO,MAAL,CAAY,sCAAZ,C;mDACL,KAAKE,GAAL,CAAST,GAAT,EAAcM,MAAd,C;;;;;;;;;;;;;;;;;;;EAlDaR,W;;AAsD5B,IAAMc,QAAQ,GAAG,IAAIb,aAAJ,EAAjB;AACA,eAAea,QAAf","sourcesContent":["import BaseRequest from './foundation/BaseRequest'\n\nclass ServerRequest extends BaseRequest {\n    getURL(url) {\n        const baseUrl = process.env.VUE_APP_SERVER_URL\n        return baseUrl.concat(url)\n    }\n    async registerUser(params) {\n        const url = this.getURL('/api/user/register-user')\n        return this.post(url, params)\n    }\n    async generateCertificate(params) {\n        const url = this.getURL('/api/user/generate-information')\n        return this.post(url, params)\n    }\n    async getCertificate() {\n        const url = this.getURL('/api/user/get-information')\n        return this.get(url)\n    }\n\n    async getCertificateToString(params) {\n        const url = this.getURL('/api/user/get-certificate-string')\n        return this.get(url, params)\n    }\n    async createSignature(params) {\n        const url = this.getURL('/api/user/create-signature')\n        return this.post(url, params)\n    }\n\n    async storeHash(params) {\n        const url = this.getURL('/api/user/store-hash')\n        return this.post(url, params)\n    }\n\n    async initCertificate(params) {\n        const url = this.getURL('/api/init-certificate-data')\n        return this.post(url, params)\n    }\n\n    async createCertificatePDF(params) {\n        console.log(\"ServerRequest -> createCertificatePDF -> params\", params)\n        const url = this.getURL('/api/create-certificate-pdf')\n        return this.post(url, params)\n    }\n\n    async sendCertificateByMail(params) {\n        const url = this.getURL('/api/send-mail-certificate')\n        return this.post(url, params)\n    }\n\n    async getCertificateByCredential(params) {\n        const url = this.getURL('/api/user/get-certificate-credential')\n        return this.get(url, params)\n    }\n}\n\nconst instance = new ServerRequest()\nexport default instance"]}]}